%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - grammar
scope: source.cfg
contexts:
# /*! CFG !*/
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.example-c
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    #- match: (([/][/])|(/\*))(?:\*/)
     # scope: punctuation.definition.comment.example-c
     # push: line_comment


    - match: '{:'
      push: C#.sublime-syntax
      with_prototype:
        - match: (?=:})
          pop: true
    - match: '{'
      scope: punctuation.definition.tag.begin
    - match: '}'
      scope: punctuation.definition.tag.end

    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(if|else|for|while)\b'
      scope: keyword.control.example-c

      # declaration of non terminals
    - match: ((non terminal ))
      scope:  variable.function # used by color scheme to highlight entity.name

    - match: ((?<=(non terminal ))([a-zA-Z]+))(?= )
      scope:  entity.name # used by color scheme to highlight entity.name

    - match: ((?<=(non terminal \w))(\t|( )+)[a-zA-Z]+(;))
      scope:  entity.name # used by color scheme to highlight entity.name
    - match: ((?<=((\w \w \w)))(\t|( )+)[a-zA-Z]+(;))
      scope:  entity.name # used by color scheme to highlight entity.name

    - match: ( )+[a-zA-Z]+(?=;)
      scope:  text # used by color scheme to highlight entity.name


    # Numbers
    - match: (?<=(\w):)([a-zA-Z0-9]+)
      scope: entity.name
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.example-c
      # green italics entity.other.inherited-class
      #
    # custom def: rule \d(?=px)
    - match: ([a-zA-Z]+(\t+|( )+)((?=->)|(?=::=)))
      scope: entity.name # used by color scheme to highlight entity.name
      # match terminals9.
    - match: (\b[A-Z]+\b)
      scope: text
      # match non-terminals - green
    - match: ((Îµ)|(epsilon))
      scope: keyword
    - match: (\b[a-zA-Z]+\b) # blue
      scope: variable.function



  double_quoted_string:
    - meta_scope: string.quoted.double.example-c
    - match: '\\.'
      scope: constant.character.escape.example-c
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

  line_comment:
    - meta_scope: comment.line.example-c
    - match: $
      pop: true


  rule:
    - match: ([a-zA-Z] )
      scope: keyword.control.c # used by color scheme to highlight
  prototype:
    - include: comments

  comments:
    # Block comments begin with !* and ends with *!
    - match: '/\*'
      scope: punctuation.definition.comment.c
      push:
        - meta_scope: comment.block.c
        - match: '\*/'
          pop: true
    # Inline comments begin with a '!' and finish at the end of the line.
    - match: '//[^\*]'
      scope: punctuation.definition.comment.c
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.c
        - match: $\n?
          pop: true
